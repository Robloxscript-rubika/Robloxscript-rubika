PLAYER = game.Players.LocalPlayer
MOUSE = PLAYER:GetMouse()
CC = workspace.CurrentCamera

ENABLED = false

_G.FREE_FOR_ALL = true

_G.CHANGE_AIM = 'q'

_G.AIM_AT = 'Head'

wait(1)

function GetNearestPlayerToMouse()
    local PLAYERS = {}
    local PLAYER_HOLD = {}
    local DISTANCES = {}
    for i, v in pairs(game.Players:GetPlayers()) do
        if v ~= PLAYER then
            table.insert(PLAYERS, v)
        end
    end
    for i, v in pairs(PLAYERS) do
        if _G.FREE_FOR_ALL == false then
            if v and (v.Character) ~= nil and v.TeamColor ~= PLAYER.TeamColor then
                local AIM = v.Character:FindFirstChild(_G.AIM_AT)
                if AIM ~= nil then
                    local DISTANCE = (AIM.Position - game.Workspace.CurrentCamera.CoordinateFrame.p).magnitude
                    local RAY = Ray.new(game.Workspace.CurrentCamera.CoordinateFrame.p, (MOUSE.Hit.p - CC.CoordinateFrame.p).unit * DISTANCE)
                    local HIT, POS = game.Workspace:FindPartOnRay(RAY, game.Workspace)
                    local DIFF = math.floor((POS - AIM.Position).magnitude)
                    PLAYER_HOLD[v.Name .. i] = {}
                    PLAYER_HOLD[v.Name .. i].dist = DISTANCE
                    PLAYER_HOLD[v.Name .. i].plr = v
                    PLAYER_HOLD[v.Name .. i].diff = DIFF
                    table.insert(DISTANCES, DIFF)
                end
            end
        elseif _G.FREE_FOR_ALL == true then
            local AIM = v.Character:FindFirstChild(_G.AIM_AT)
            if AIM ~= nil then
                local DISTANCE = (AIM.Position - game.Workspace.CurrentCamera.CoordinateFrame.p).magnitude
                local RAY = Ray.new(game.Workspace.CurrentCamera.CoordinateFrame.p, (MOUSE.Hit.p - CC.CoordinateFrame.p).unit * DISTANCE)
                local HIT, POS = game.Workspace:FindPartOnRay(RAY, game.Workspace)
                local DIFF = math.floor((POS - AIM.Position).magnitude)
                PLAYER_HOLD[v.Name .. i] = {}
                PLAYER_HOLD[v.Name .. i].dist = DISTANCE
                PLAYER_HOLD[v.Name .. i].plr = v
                PLAYER_HOLD[v.Name .. i].diff = DIFF
                table.insert(DISTANCES, DIFF)
            end
        end
    end

    if unpack(DISTANCES) == nil then
        return false
    end

    local L_DISTANCE = math.floor(math.min(unpack(DISTANCES)))
    if L_DISTANCE > 20 then
        return false
    end

    for i, v in pairs(PLAYER_HOLD) do
        if v.diff == L_DISTANCE then
            return v.plr
        end
    end
    return false
end

GUI_MAIN = Instance.new('ScreenGui', game.CoreGui)
GUI_TARGET = Instance.new('TextLabel', GUI_MAIN)
GUI_AIM_AT = Instance.new('TextLabel', GUI_MAIN)

GUI_MAIN.Name = 'AIMBOT'

GUI_TARGET.Size = UDim2.new(0, 200, 0, 30)
GUI_TARGET.BackgroundTransparency = 0.5
GUI_TARGET.BackgroundColor = BrickColor.new('Fossil')
GUI_TARGET.BorderSizePixel = 0
GUI_TARGET.Position = UDim2.new(0.5, -100, 0, 0)
GUI_TARGET.Text = 'AIMBOT : OFF'
GUI_TARGET.TextColor3 = Color3.new(1, 1, 1)
GUI_TARGET.TextStrokeTransparency = 1
GUI_TARGET.TextWrapped = true
GUI_TARGET.FontSize = 'Size24'
GUI_TARGET.Font = 'SourceSansBold'

GUI_AIM_AT.Size = UDim2.new(0, 200, 0, 20)
GUI_AIM_AT.BackgroundTransparency = 0.5
GUI_AIM_AT.BackgroundColor = BrickColor.new('Fossil')
GUI_AIM_AT.BorderSizePixel = 0
GUI_AIM_AT.Position = UDim2.new(0.5, -100, 0, 30)
GUI_AIM_AT.Text = 'AIMING : HEAD'
GUI_AIM_AT.TextColor3 = Color3.new(1, 1, 1)
GUI_AIM_AT.TextStrokeTransparency = 1
GUI_AIM_AT.TextWrapped = true
GUI_AIM_AT.FontSize = 'Size18'
GUI_AIM_AT.Font = 'SourceSansBold'


-- Mobile Input Handling (Automatic Aim)
local TOUCH_ENABLED = false
local AUTO_AIM_TOGGLE_BUTTON = nil  -- Button to toggle auto-aim

-- Create a button for mobile
if game:GetService("UserInputService").TouchEnabled then -- Check if it's a touch device
    AUTO_AIM_TOGGLE_BUTTON = Instance.new("TextButton")
    AUTO_AIM_TOGGLE_BUTTON.Parent = GUI_MAIN  -- Or another suitable parent
    AUTO_AIM_TOGGLE_BUTTON.Text = "Auto Aim: OFF"
    AUTO_AIM_TOGGLE_BUTTON.Size = UDim2.new(0, 150, 0, 30)
    AUTO_AIM_TOGGLE_BUTTON.Position = UDim2.new(0.5, -75, 0, 60) -- Adjust position as needed
    AUTO_AIM_TOGGLE_BUTTON.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    AUTO_AIM_TOGGLE_BUTTON.TextColor3 = Color3.fromRGB(200, 200, 200)
    AUTO_AIM_TOGGLE_BUTTON.Font = Enum.Font.SourceSansBold
    AUTO_AIM_TOGGLE_BUTTON.MouseButton1Click:Connect(function()
        TOUCH_ENABLED = not TOUCH_ENABLED
        AUTO_AIM_TOGGLE_BUTTON.Text = "Auto Aim: " .. (TOUCH_ENABLED and "ON" or "OFF")
        ENABLED = TOUCH_ENABLED -- Tie ENABLED to the toggle
    end)

else -- For PC, keep the mouse button functionality
    MOUSE.Button2Down:connect(function()
        ENABLED = true
    end)

    MOUSE.Button2Up:connect(function()
        ENABLED = false
    end)
end


MOUSE.KeyDown:connect(function(KEY)
    if KEY == _G.CHANGE_AIM then
        if _G.AIM_AT == 'Head' then
            _G.AIM_AT = 'Torso'
            GUI_AIM_AT.Text = 'AIMING : TORSO'
        elseif _G.AIM_AT == 'Torso' then
            _G.AIM_AT = 'Head'
            GUI_AIM_AT.Text = 'AIMING : HEAD'
        end
    end
end)

game:GetService('RunService').RenderStepped:connect(function()
    if ENABLED then
        local TARGET = GetNearestPlayerToMouse()
        if (TARGET ~= false) then
            local AIM = TARGET.Character:FindFirstChild(_G.AIM_AT)
            if AIM then
                -- Corrected: Wait for character and part if necessary
                local character = TARGET.Character or TARGET.CharacterAdded:Wait()
                local aimPart = character:FindFirstChild(_G.AIM_AT)
                if aimPart then -- Check if the part exists
                    CC.CFrame = CFrame.new(CC.CFrame.p, aimPart.CFrame.p) -- Use CFrame instead of CoordinateFrame
                end
            end
            GUI_TARGET.Text = 'AIMBOT : ' .. TARGET.Name:sub(1, 5)
        else
            GUI_TARGET.Text = 'AIMBOT : OFF'
        end
    end
end)
